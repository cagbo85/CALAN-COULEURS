name: ðŸŽµ Calan'Couleurs CI/CD Pipeline

on:
  push:
    branches: [main, master, production]
  pull_request:
    branches: [main, master]

env:
  PHP_VERSION: "8.2"
  NODE_VERSION: "18"

jobs:
  tests:
    name: Tests & Quality
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: calan_test
          MYSQL_USER: calan_user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, gd, zip, bcmath
          coverage: xdebug
          tools: composer:v2

      - name: Create required directories and setup environment
        run: |
          mkdir -p bootstrap/cache
          mkdir -p storage/app
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          mkdir -p storage/logs
          chmod -R 755 storage
          chmod -R 755 bootstrap/cache

          # CrÃ©er .env pour les tests
          cat > .env << 'EOF'
          APP_NAME="Calan'Couleurs Test"
          APP_ENV=testing
          APP_KEY=base64:test-key-for-ci-cd-pipeline-calan-couleurs
          APP_DEBUG=true
          APP_URL=http://localhost

          APP_LOCALE=fr
          APP_FALLBACK_LOCALE=fr
          APP_FAKER_LOCALE=fr_FR

          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=calan_test
          DB_USERNAME=calan_user
          DB_PASSWORD=password

          MAIL_MAILER=array
          CACHE_DRIVER=array
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=array

          BCRYPT_ROUNDS=4
          EOF

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install PHP dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install NPM dependencies and build
        run: |
          npm ci --prefer-offline --no-audit
          npm run build

      - name: Prepare Laravel Application
        run: |
          php artisan key:generate

      - name: Run Database Migrations
        run: php artisan migrate --force --no-interaction


      - name: Seed Database
        run: php artisan db:seed --force --no-interaction

      - name: Clear caches (after migrations)
        run: |
          php artisan config:clear

      - name: Verify tests exist
        run: |
          echo "Checking for test files:"
          find tests/ -name "*.php" -type f | head -10
          echo "PHPUnit configuration:"
          cat phpunit.xml
      - name: Run PHPUnit Tests
        run: |
          vendor/bin/phpunit \
            --configuration=phpunit.xml \
            --coverage-text \
            --coverage-clover=coverage.xml \
            --testdox \
            --fail-on-empty-test-suite
      - name: Upload Coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Create required directories
        run: |
          mkdir -p bootstrap/cache
          chmod -R 755 bootstrap/cache

      - name: Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Laravel Pint (Code Style)
        run: ./vendor/bin/pint --test

      - name: Security Audit
        run: composer audit

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [tests, code-quality]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.DEPLOY_PASSWORD }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            echo "ðŸŽµ DÃ©ploiement Calan'Couleurs..."
            cd ${{ secrets.DEPLOY_PATH || '/home/agch4404/public_html/laravel' }}

            php artisan down --message="Mise Ã  jour..." --retry=60
            git pull origin main

            mkdir -p bootstrap/cache storage/framework/{cache,sessions,views} storage/logs
            chmod -R 755 storage bootstrap/cache

            composer install --no-dev --optimize-autoloader --no-interaction
            npm ci --production && npm run build

            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan up

            echo "DÃ©ploiement terminÃ©!"

      - name: Notify Deployment Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "Calan'Couleurs dÃ©ployÃ© avec succÃ¨s sur production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Deployment Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "Ã‰chec du dÃ©ploiement Calan'Couleurs"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
