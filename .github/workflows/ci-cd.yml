name: Calan'Couleurs CI/CD Pipeline

permissions:
  contents: write
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PHP_VERSION: "8.2"
  NODE_VERSION: "20"

jobs:
  build-and-release:
    name: Build frontend & push release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install & build
        run: |
          npm ci
          npm run build
          mkdir -p /tmp/build
          cp -r public/build /tmp/build/build

      - name: Prepare release branch
        run: |
          git fetch origin
          git checkout -B release origin/main
          rm -rf public/build
          mkdir -p public
          cp -r /tmp/build/build public/
          git add -f public/build
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -m "build: frontend assets for $GITHUB_SHA" || echo "No asset changes"
          git push origin release
  tests:
    name: Tests & Quality
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: calan_test
          MYSQL_USER: calan_user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, gd, zip, bcmath
          coverage: xdebug
          tools: composer:v2

      - name: Create required directories and setup environment
        run: |
          mkdir -p bootstrap/cache
          mkdir -p storage/app
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          mkdir -p storage/logs
          chmod -R 755 storage
          chmod -R 755 bootstrap/cache

          # CrÃ©er .env pour les tests
          cat > .env << 'EOF'
          APP_NAME="Calan'Couleurs Test"
          APP_ENV=testing
          APP_KEY=base64:test-key-for-ci-cd-pipeline-calan-couleurs
          APP_DEBUG=true
          APP_URL=http://localhost

          APP_LOCALE=fr
          APP_FALLBACK_LOCALE=fr
          APP_FAKER_LOCALE=fr_FR

          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=calan_test
          DB_USERNAME=calan_user
          DB_PASSWORD=password

          MAIL_MAILER=array
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=array

          BCRYPT_ROUNDS=4
          EOF

      - uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install PHP dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install NPM dependencies and build
        run: |
          npm ci --prefer-offline --no-audit
          npm run build

      - name: Prepare Laravel Application
        run: |
          php artisan key:generate
          php artisan migrate --env=testing --force
          php artisan db:seed --env=testing --force

      - name: Run Database Migrations
        run: php artisan migrate --force --no-interaction

      - name: Seed Database
        run: php artisan db:seed --force --no-interaction

      - name: Clear caches (after migrations)
        run: |
          php artisan config:clear
      - name: Run PHPUnit Tests
        run: |
          vendor/bin/phpunit \
            --configuration=phpunit.xml \
            --coverage-text \
            --coverage-clover=coverage.xml \
            --testdox \
            --fail-on-empty-test-suite
      - name: Upload Coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Create required directories
        run: |
          mkdir -p bootstrap/cache
          chmod -R 755 bootstrap/cache

      - name: Prepare app
        run: |
          mkdir -p storage/framework/{cache,data,sessions,views} bootstrap/cache
          chmod -R 777 storage bootstrap/cache

      - name: Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # - name: Generate app key
      #   run: php artisan key:generate --force

      - name: Laravel Pint (Code Style)
        run: ./vendor/bin/pint --test

      - name: Security Audit
        run: composer audit --no-interaction --no-ansi

  deploy:
    name: Deploy to Production
    needs: [tests, code-quality, build-and-release]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via WebHook
        env:
          DEPLOY_URL: ${{ secrets.DEPLOY_URL }}
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          curl -fsS -X POST \
            -H "X-Deploy-Token: $DEPLOY_TOKEN" \
            "$DEPLOY_URL"
